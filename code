#include <SPI.h>
#include <MFRC522.h>
#include <RTClib.h>
#include <SoftwareSerial.h>

#define RST_PIN         9
#define SS_PIN          10

MFRC522 mfrc522(SS_PIN, RST_PIN);   // Create MFRC522 instance

SoftwareSerial gsm(2, 3); // RX, TX

#define GSM_RST_PIN 4 // Define the reset pin for the GSM module
#define BUZZER_PIN 5  // Define the pin for the buzzer

RTC_DS3231 rtc; // Create RTC instance

// Define UIDs for two different RFID cards
byte card1UID[] = {0x13, 0x5D, 0x57, 0xFB}; // Replace with actual UID of the first card
byte card2UID[] = {0xB3, 0xB1, 0x87, 0xF4}; // Replace with actual UID of the second card

MFRC522::MIFARE_Key key; // Declare the key in the global scope

// Phone numbers of students
String manishaPhoneNumber = "7355761950"; // Replace with Manisha's phone number
String siddharthPhoneNumber = "6294078488"; // Replace with Siddharth's phone number

// Store the detected card information to ensure only one detection per card
int detectedCards[2] = {0, 0};
int numDetected = 0;

void setup() {
  Serial.begin(9600);        // Initialize serial communications with the PC
  gsm.begin(9600);           // Initialize GSM module serial communications
  SPI.begin();               // Init SPI bus
  mfrc522.PCD_Init();        // Init MFRC522 card
  Serial.println(F("Ready to read RFID cards"));

  pinMode(GSM_RST_PIN, OUTPUT);
  digitalWrite(GSM_RST_PIN, HIGH); // Keep the GSM module out of reset

  pinMode(BUZZER_PIN, OUTPUT);     // Initialize the buzzer pin as an output
  digitalWrite(BUZZER_PIN, LOW);   // Ensure the buzzer is off initially

  // Initialize RTC
  if (!rtc.begin()) {
    Serial.println("Couldn't find RTC");
    while (1);
  }

  // Prepare key - all keys are set to FFFFFFFFFFFFh at chip delivery from the factory.
  for (byte i = 0; i < 6; i++) key.keyByte[i] = 0xFF;

  // Initialize the Excel sheet
  Serial.println("CLEARSHEET");                 // clears starting at row 1
  Serial.println("LABEL,Date,Time,Name,Number");// make four columns (Date, Time, Name, Number)
}

void loop() {
  // Reset the loop if no new card present on the sensor/reader. This saves the entire process when idle.
  if (!mfrc522.PICC_IsNewCardPresent()) {
    return;
  }

  // Select one of the cards
  if (!mfrc522.PICC_ReadCardSerial()) {
    return;
  }

  Serial.println(F("*Card Detected:*"));
  mfrc522.PICC_DumpDetailsToSerial(&(mfrc522.uid)); // Dump some details about the card

  // Check which card is detected
  if (isSameUID(mfrc522.uid.uidByte, mfrc522.uid.size, card1UID, sizeof(card1UID))) {
    if (!detectedCards[0]) {
      Serial.println(F("Card belongs to Manisha Sharma"));
      logAttendance("Manisha Sharma", "123456", manishaPhoneNumber); // Log attendance for Manisha
      detectedCards[0] = 1;
      numDetected++;
    }
  } else if (isSameUID(mfrc522.uid.uidByte, mfrc522.uid.size, card2UID, sizeof(card2UID))) {
    if (!detectedCards[1]) {
      Serial.println(F("Card belongs to Siddharth Chaandra"));
      logAttendance("Siddharth Chaandra", "789101", siddharthPhoneNumber); // Log attendance for Siddharth
      detectedCards[1] = 1;
      numDetected++;
    }
  } else {
    Serial.println(F("Unknown card"));
  }

  delay(1000); // Change value if you want to read cards faster

  mfrc522.PICC_HaltA();
  mfrc522.PCD_StopCrypto1();
}

// Function to check if two UIDs are the same
bool isSameUID(byte *uid1, byte uid1Size, byte *uid2, byte uid2Size) {
  if (uid1Size != uid2Size) {
    return false;
  }
  for (byte i = 0; i < uid1Size; i++) {
    if (uid1[i] != uid2[i]) {
      return false;
    }
  }
  return true;
}

// Function to log attendance
void logAttendance(String name, String number, String phoneNumber) {
  Serial.print(F("Logging attendance for "));
  Serial.println(name);
  
  // Get current time from RTC
  DateTime now = rtc.now();
  String currentTime = String(now.hour()) + ":" + String(now.minute()) + ":" + String(now.second());
  String currentDate = String(now.day()) + "-" + String(now.month()) + "-" + String(now.year());

  // Print attendance
  Serial.print("Name: ");
  Serial.print(name);
  Serial.print(", Number: ");
  Serial.print(number);
  Serial.print(", Time: ");
  Serial.print(currentTime);
  Serial.print(", Date: ");
  Serial.println(currentDate);

  // Log attendance in Excel
  Serial.print("DATA,");
  Serial.print(currentDate);
  Serial.print(",");
  Serial.print(currentTime);
  Serial.print(",");
  Serial.print(name);
  Serial.print(",");
  Serial.println(number);

  // Save workbook periodically (optional)
  Serial.println("SAVEWORKBOOKAS,Names/WorkNames");

  // Send SMS with attendance details
  String message = "Attendance logged for " + name + " (Number: " + number + ") at " + currentTime + " on " + currentDate;
  sendSMS(message, phoneNumber);
}

// Function to send SMS
void sendSMS(String message, String phoneNumber) {
  Serial.println(F("Sending SMS..."));
  gsm.println("AT+CMGF=1"); // Set SMS to text mode
  delay(1000);
  gsm.print("AT+CMGS=\""); // Set the recipient phone number
  gsm.print(phoneNumber);
  gsm.println("\"");
  delay(1000);
  gsm.println(message); // Send the message
  delay(100);
  gsm.write(26); // End AT command with Ctrl+Z
  delay(1000);
  Serial.println(F("SMS sent"));
}

// Function to beep the buzzer
void beepBuzzer() {
  digitalWrite(BUZZER_PIN, HIGH); // Turn on the buzzer
  delay(500);                     // Beep duration
  digitalWrite(BUZZER_PIN, LOW);  // Turn off the buzzer
}
